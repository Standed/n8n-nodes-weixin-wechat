const { WechatyBuilder } = require('wechaty');
const { PuppetPadlocal } = require('wechaty-puppet-padlocal');
const { FileBox } = require('file-box');

class PersonalWechatService {
  constructor(config) {
    this.config = config;
    this.bot = null;
    this.isLoggedIn = false;
    this.contacts = new Map();
    this.rooms = new Map();
    this.botSelf = null;
    
    // ÊîØÊåÅÁöÑpuppetÁ±ªÂûã
    this.puppetType = config.puppetType || 'wechat'; // 'wechat', 'padlocal'
    this.padlocalToken = config.padlocalToken;
  }

  // ÂàùÂßãÂåñBot
  async initBot() {
    console.log(`ü§ñ ÂàùÂßãÂåñ‰∏™‰∫∫ÂæÆ‰ø°Bot (${this.puppetType})...`);

    let puppet = null;

    if (this.puppetType === 'padlocal') {
      if (!this.padlocalToken) {
        throw new Error('PadLocalÊ®°ÂºèÈúÄË¶ÅÈÖçÁΩÆtoken');
      }
      puppet = new PuppetPadlocal({
        token: this.padlocalToken,
      });
      console.log('üì± ‰ΩøÁî® PadLocal Puppet (‰ªòË¥πÊ®°Âºè)');
    } else {
      console.log('üì± ‰ΩøÁî® Web WeChat Puppet (ÂÖçË¥πÊ®°Âºè)');
    }

    const botConfig = {
      name: 'n8n-personal-wechat-bot',
    };

    if (puppet) {
      botConfig.puppet = puppet;
    }

    this.bot = WechatyBuilder.build(botConfig);

    this.bot
      .on('scan', (qrcode, status) => {
        console.log('üì± Êâ´Á†ÅÁôªÂΩïÁä∂ÊÄÅ:', status);
        console.log('üîó Êâ´Á†ÅÈìæÊé•: https://wechaty.js.org/qrcode/' + encodeURIComponent(qrcode));
        console.log('üí° ËØ∑Áî®ÂæÆ‰ø°Êâ´Êèè‰∏äÊñπ‰∫åÁª¥Á†ÅÁôªÂΩï');
      })
      .on('login', async (user) => {
        console.log('‚úÖ ‰∏™‰∫∫ÂæÆ‰ø°ÁôªÂΩïÊàêÂäü:', user.name());
        this.isLoggedIn = true;
        this.botSelf = user;
        await this.loadContacts();
        await this.loadRooms();
      })
      .on('logout', (user) => {
        console.log('üîì ‰∏™‰∫∫ÂæÆ‰ø°Â∑≤ÁôªÂá∫:', user.name());
        this.isLoggedIn = false;
        this.contacts.clear();
        this.rooms.clear();
        this.botSelf = null;
      })
      .on('message', async (msg) => {
        if (!msg.self()) {
          console.log('üí¨ Êî∂Âà∞Ê∂àÊÅØ:', msg.text(), 'Êù•Ëá™:', msg.talker().name());
        }
      })
      .on('error', (error) => {
        console.error('‚ùå ‰∏™‰∫∫ÂæÆ‰ø°BotÈîôËØØ:', error);
        // ‰∏çË¶ÅÈáçÂêØÔºåËÆ©Áî®Êà∑ÂÜ≥ÂÆö
      });

    try {
      await this.bot.start();
      console.log('üöÄ ‰∏™‰∫∫ÂæÆ‰ø°BotÂêØÂä®ÊàêÂäü');
    } catch (error) {
      console.error('‚ùå ‰∏™‰∫∫ÂæÆ‰ø°BotÂêØÂä®Â§±Ë¥•:', error);
      throw error;
    }
  }

  // Âä†ËΩΩËÅîÁ≥ª‰∫∫ÂàóË°®
  async loadContacts() {
    if (!this.bot || !this.isLoggedIn) return;
    
    try {
      const contactList = await this.bot.Contact.findAll();
      this.contacts.clear();
      
      for (const contact of contactList) {
        if (contact.friend()) {
          this.contacts.set(contact.id, {
            id: contact.id,
            name: contact.name(),
            alias: await contact.alias() || '',
          });
        }
      }
      
      console.log(`üìã Âä†ËΩΩ‰∫Ü ${this.contacts.size} ‰∏™ËÅîÁ≥ª‰∫∫`);
    } catch (error) {
      console.error('‚ùå Âä†ËΩΩËÅîÁ≥ª‰∫∫Â§±Ë¥•:', error);
    }
  }

  // Âä†ËΩΩÁæ§ÁªÑÂàóË°®
  async loadRooms() {
    if (!this.bot || !this.isLoggedIn) return;
    
    try {
      const roomList = await this.bot.Room.findAll();
      this.rooms.clear();
      
      for (const room of roomList) {
        this.rooms.set(room.id, {
          id: room.id,
          topic: await room.topic(),
        });
      }
      
      console.log(`üè† Âä†ËΩΩ‰∫Ü ${this.rooms.size} ‰∏™Áæ§ÁªÑ`);
    } catch (error) {
      console.error('‚ùå Âä†ËΩΩÁæ§ÁªÑÂ§±Ë¥•:', error);
    }
  }

  // ÂèëÈÄÅÊñáÊú¨Ê∂àÊÅØ
  async sendText(toType, toId, text) {
    if (!this.isLoggedIn) {
      throw new Error('‰∏™‰∫∫ÂæÆ‰ø°Êú™ÁôªÂΩï');
    }

    try {
      let target = null;

      if (toType === 'filehelper') {
        target = this.bot.Contact.load('filehelper');
      } else if (toType === 'contact') {
        if (!toId) throw new Error('Áº∫Â∞ëËÅîÁ≥ª‰∫∫ID');
        target = this.bot.Contact.load(toId);
      } else if (toType === 'room') {
        if (!toId) throw new Error('Áº∫Â∞ëÁæ§ÁªÑID');
        target = this.bot.Room.load(toId);
      } else {
        throw new Error('Êó†ÊïàÁöÑÁõÆÊ†áÁ±ªÂûã');
      }

      await target.say(text);
      
      console.log(`üì§ ‰∏™‰∫∫ÂæÆ‰ø°Ê∂àÊÅØÂèëÈÄÅÊàêÂäü:`, {
        toType,
        toId: toId || 'filehelper',
        text: text.substring(0, 50) + (text.length > 50 ? '...' : '')
      });

      return {
        success: true,
        messageId: 'personal_wechat_' + Date.now(),
        data: {
          toType,
          toId: toId || 'filehelper',
          text,
        }
      };

    } catch (error) {
      console.error('‚ùå ‰∏™‰∫∫ÂæÆ‰ø°ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•:', error);
      throw error;
    }
  }

  // ÂèëÈÄÅÊñá‰ª∂
  async sendFile(toType, toId, url, filename) {
    if (!this.isLoggedIn) {
      throw new Error('‰∏™‰∫∫ÂæÆ‰ø°Êú™ÁôªÂΩï');
    }

    try {
      let target = null;

      if (toType === 'filehelper') {
        target = this.bot.Contact.load('filehelper');
      } else if (toType === 'contact') {
        if (!toId) throw new Error('Áº∫Â∞ëËÅîÁ≥ª‰∫∫ID');
        target = this.bot.Contact.load(toId);
      } else if (toType === 'room') {
        if (!toId) throw new Error('Áº∫Â∞ëÁæ§ÁªÑID');
        target = this.bot.Room.load(toId);
      }

      const fileBox = FileBox.fromUrl(url, filename);
      await target.say(fileBox);
      
      console.log(`üìé ‰∏™‰∫∫ÂæÆ‰ø°Êñá‰ª∂ÂèëÈÄÅÊàêÂäü:`, {
        toType,
        toId: toId || 'filehelper',
        url,
        filename
      });

      return {
        success: true,
        messageId: 'personal_wechat_file_' + Date.now(),
        data: { toType, toId, url, filename }
      };

    } catch (error) {
      console.error('‚ùå ‰∏™‰∫∫ÂæÆ‰ø°ÂèëÈÄÅÊñá‰ª∂Â§±Ë¥•:', error);
      throw error;
    }
  }

  // Ëé∑ÂèñËÅîÁ≥ª‰∫∫ÂàóË°®
  getContacts() {
    return Array.from(this.contacts.values()).map(contact => ({
      id: contact.id,
      name: contact.name,
      alias: contact.alias
    }));
  }

  // Ëé∑ÂèñÁæ§ÁªÑÂàóË°®
  getRooms() {
    return Array.from(this.rooms.values()).map(room => ({
      id: room.id,
      topic: room.topic
    }));
  }

  // ÂÅ•Â∫∑Ê£ÄÊü•
  async healthCheck() {
    return {
      status: 'ok',
      service: 'personal-wechat',
      puppetType: this.puppetType,
      loggedIn: this.isLoggedIn,
      botName: this.botSelf ? this.botSelf.name() : null,
      contacts: this.contacts.size,
      rooms: this.rooms.size
    };
  }

  // ÂÅúÊ≠¢ÊúçÂä°
  async stop() {
    if (this.bot) {
      await this.bot.stop();
    }
  }
}

module.exports = PersonalWechatService;